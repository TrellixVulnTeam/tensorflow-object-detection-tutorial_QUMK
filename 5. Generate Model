In "3. Prepare the Workspace", we have mentioned that the training job needs a pre-trained model with our own dataset. As a general user, we do not make wheels but use  
it directly. Therefore, in this section, we would choose a suitable pre-trained model and use our own dataset to generate a new one.

<Part One>    Download Pre-Trained Model
Here is TensorFlow 2 Detection Model Zoo, it contains the most popular pre-tained model. The download link is:
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md
Open the page, and you could find abot 40 models in list, I choose "SSD ResNet50 V1 FPN 640x640 (RetinaNet50)" firstly and follow sglvladi's guide as bolow:
https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html#configuring-a-training-job
It works!
But now I use "Faster R-CNN ResNet50 V1 640x640" because I want to offer you another case, this model work effectly with my dataset: to detect three different shapes of 
three-dimensional figures which have three colors.
After download "Faster R-CNN ResNet50 V1 640x640", you would get a zip named "faster_rcnn_resnet50_v1_640x640_coco17_tpu-8.tar.gz", unzip it and put it in:
>> Tensorflow\workspace\training_demo\pre-trained-models

<Part Two>    Configure Pipeline
Open "faster_rcnn_resnet50_v1_640x640_coco17_tpu-8", there are three files under this folder, now let me introduce what are they:
"checkpoint" : Record key information about the training process. During a training job, this folder would build several file, the format is "ckpt-*.data-*****-of-*****"  
and "ckpt-*.index". These files help us to load and evaluate the process model.
"saved_model" : A format of exported model recommanded by Tensorflow Official. Once our training job finished, we need this folder to export the final model.
"pipeline.config" : Support users to configure their training jobs according to their own dataset, computer and expected goal.
Now we begin to configure "pipeline.config". Copy this file and paste into "models\my_faster_rcnn_resnet50_v1". In detail, follow the below step:
a. Copy "pipeline.config" from "Tensorflow\workspace\training_demo\pre-trained-models\faster_rcnn_resnet50_v1_640x640_coco17_tpu-8"
b. Cd "Tensorflow\workspace\training_demo\models" and create a new folder named "my_faster_rcnn_resnet50_v1"
c. Paste "pipeline.config" into "Tensorflow\workspace\training_demo\models\my_faster_rcnn_resnet50_v1"
---------------------------------------------------------------------------------
Open this file and focus on the below line:
line 10     num_classes: 90
line 93     batch_size: 64
line 126    label_map_path: "PATH_TO_BE_CONFIGURED/label_map.txt"
line 128    input_path: "PATH_TO_BE_CONFIGURED/train2017-?????-of-00256.tfrecord"
line 139    label_map_path: "PATH_TO_BE_CONFIGURED/label_map.txt"
line 143    input_path: "PATH_TO_BE_CONFIGURED/val2017-?????-of-00032.tfrecord"
---------------------------------------------------------------------------------
"num_classes" : Depends on how many objects(classes). For me, I want the model could distinguish three different shapes of three-dimensional figures.
"batch_size" : Affects the degree of optimization and speed of the model. For me, my computer's performance is low, so I have to reduce it. Possibly, it always more  
than 8 and less than 32.
"label_map_path" : It have been changed in "4. Generate Dataset", this part would pass it.
"input_path" : Point to the storage address of 'train.record' and 'test.record'.
-----------------------------------------------------------------------------------------------------------------
My configuration is:
line 10     num_classes: 3
line 93     batch_size: 1
line 126    label_map_path: "C:/Users/yjz/Desktop/Tensorflow/workspace/training_demo/annotations/label_map.pbtxt"
line 128    input_path: "C:/Users/yjz/Desktop/Tensorflow/workspace/training_demo/annotations/train.record"
line 139    label_map_path: "C:/Users/yjz/Desktop/Tensorflow/workspace/training_demo/annotations/label_map.pbtxt"
line 143    input_path: "C:/Users/yjz/Desktop/Tensorflow/workspace/training_demo/annotations/test.record"
-----------------------------------------------------------------------------------------------------------------
Notice: Using '/' not '\', because '\' is escape character in python, using '\' may lead to unexpected errors!

<Part Three>    Start Training
Finally we start training!
Confirm you have downloaded the 'scripts' and put it in:
>> Tensorflow\workspace\training_demo
as
>> Tensorflow\workspace\training_demo\scripts
To start your training job, just run "Anaconda prompt" and type:
$ activate tensorflow
$ cd C:\Users\yjz\Desktop\Tensorflow\workspace\training_demo
$ python scripts\process\model_main_tf2.py --model_dir=models\my_faster_rcnn_resnet50_v1 --pipeline_config_path=models\my_faster_rcnn_resnet50_v1\pipeline.config
If you see the some report as following:
------------------------------------------------------------------------------------------------------------
INFO:tensorflow:Step 100 per-step time 0.565s
I0603 11:21:09.051827 19816 model_lib_v2.py:705] Step 100 per-step time 0.565s
INFO:tensorflow:{'Loss/BoxClassifierLoss/classification_loss': 0.21693519,
 'Loss/BoxClassifierLoss/localization_loss': 0.2994723,
 'Loss/RPNLoss/localization_loss': 0.0028177896,
 'Loss/RPNLoss/objectness_loss': 0.010048698,
 'Loss/regularization_loss': 0.0,
 'Loss/total_loss': 0.529274,
 'learning_rate': 0.014666351}
I0603 11:21:09.067449 19816 model_lib_v2.py:708] {'Loss/BoxClassifierLoss/classification_loss': 0.21693519,
 'Loss/BoxClassifierLoss/localization_loss': 0.2994723,
 'Loss/RPNLoss/localization_loss': 0.0028177896,
 'Loss/RPNLoss/objectness_loss': 0.010048698,
 'Loss/regularization_loss': 0.0,
 'Loss/total_loss': 0.529274,
 'learning_rate': 0.014666351}
INFO:tensorflow:Step 200 per-step time 0.224s
I0603 11:21:31.471458 19816 model_lib_v2.py:705] Step 200 per-step time 0.224s
INFO:tensorflow:{'Loss/BoxClassifierLoss/classification_loss': 0.49190006,
 'Loss/BoxClassifierLoss/localization_loss': 0.080457255,
 'Loss/RPNLoss/localization_loss': 0.19511494,
 'Loss/RPNLoss/objectness_loss': 0.12774888,
 'Loss/regularization_loss': 0.0,
 'Loss/total_loss': 0.8952211,
 'learning_rate': 0.0159997}
I0603 11:21:31.471458 19816 model_lib_v2.py:708] {'Loss/BoxClassifierLoss/classification_loss': 0.49190006,
 'Loss/BoxClassifierLoss/localization_loss': 0.080457255,
 'Loss/RPNLoss/localization_loss': 0.19511494,
 'Loss/RPNLoss/objectness_loss': 0.12774888,
 'Loss/regularization_loss': 0.0,
 'Loss/total_loss': 0.8952211,
 'learning_rate': 0.0159997}
------------------------------------------------------------------------------------------------------------
It means that the traing job has began, this may spend more than one hours until the steps of training up to 25000.

<Part Four>  Monitor Training Job through Tensorboard
Tensorboard is an effective tool offered by Tensorflow Official. You could click below url to learn the details of it:
https://www.tensorflow.org/tensorboard
Use this configured pre-trained model to train your own dataset, does the training job perform good? Would we could get a well performance model? Should we optimize 
our dataset? The answer may lie in TensorBoard.
When the training job is ongoing, you could follow below steps to monitor the training job:
a. Run a new (don't close Part Three cmd!) "Anaconda prompt"
b. Type the commands as following:
$ activate tensorflow
$ cd C:\Users\yjz\Desktop\Tensorflow\workspace\training_demo
$ tensorboard --logdir=models\my_faster_rcnn_resnet50_v1
c. Open a browser and copy the url:
http://localhost:6006/
d. Monitor the Training job, especially focus on last two images named "Loss_total_loss" and "learning_rate".
[Recommand] After the training job finished, download these two .svg and save in:
>> Tensorflow\workspace\readme
The reason for saving these two images is that we can compare the performance of different training tasks to guide us to optimize the dataset or choose a better  
pre-trained model.

<Part Five>  Export and Verify Trained Model
This is the final step of the whole tutorial.
When the training job finished, we should export the trained model and verify its performance.
Firstly, type below commands with "Anaconda prompt" to export our trained model:
$ activate tensorflow
$ cd C:\Users\yjz\Desktop\Tensorflow\workspace\training_demo
$ python scripts\process\exporter_main_v2.py --input_type image_tensor --pipeline_config_path models\my_faster_rcnn_resnet50_v1\pipeline.config  
--trained_checkpoint_dir models\my_faster_rcnn_resnet50_v1\ --output_directory exported-models\my_model
This operation usually completes within one minute.
After that, you could find a new folder named "my_model" which contains "checkpoint", "saved_model" and "pipeline.config". Open "checkpoint" folder, you could  
find "ckpt-0" files, it means that our trained model could be loaded to a new round of training.
Secondly, record a test video about the object detection task and put it in:
>> Tensorflow\workspace\training_demo\verify-video
Thanks to abdelrahman-gaber's job, we could verify our model with a simple command:
$ python scripts\process\detect_objects.py --model_path exported-models\my_model\saved_model --path_to_labelmap annotations/label_map.pbtxt --threshold 0.5  
--video_path verify-video\verify_video_0607_d.mp4 --video_input
And here is his repository: https://github.com/abdelrahman-gaber/tf2-object-detection-api-tutorial
When you run the above command, A window with the video playing will be opened, and you could check the performance of the trained model, i.e. whether the model  
can accurately detect your target object.

<Conclusion>
That's all. Thanks for your reading and would you give me a STAR?
